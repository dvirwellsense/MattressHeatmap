using AForge.Imaging.Filters;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO.Ports;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;

namespace MattressHeatmap
{
    public enum ConnectionType { Bluetooth, Serial, NotConnected }

    public partial class ucHeatMap : UserControl
    {
        private double[,] capHeatValues = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.11022302462516E-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0221475066960282, 0.0448684311756467, 0.0614745084375788, 0.0715979237109554, 0.0750000000000001, 0.0715979237109554, 0.0614745084375788, 0.0448684311756467, 0.0221475066960282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0253572157732049, 0.0614745084375788, 0.0922252789298245, 0.116977011831709, 0.135147072961082, 0.146259328415933, 0.15, 0.146259328415933, 0.135147072961082, 0.116977011831709, 0.0922252789298245, 0.0614745084375788, 0.0253572157732049, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0448684311756467, 0.0887509630206024, 0.127827739425975, 0.161335664865292, 0.188487526462115, 0.208534165703034, 0.220846114639694, 0.225, 0.220846114639694, 0.208534165703034, 0.188487526462115, 0.161335664865292, 0.127827739425975, 0.0887509630206024, 0.0448684311756467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.051471862576143, 0.102739064044901, 0.15, 0.192451415095755, 0.229179606750063, 0.259199719101185, 0.281534156157351, 0.295330668877609, 0.3, 0.295330668877609, 0.281534156157351, 0.259199719101185, 0.229179606750063, 0.192451415095755, 0.15, 0.102739064044901, 0.051471862576143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0448684311756467, 0.102739064044901, 0.157537879754125, 0.208534165703034, 0.254825604971803, 0.295330668877609, 0.328817017060207, 0.353991758303961, 0.369669914110089, 0.375, 0.369669914110089, 0.353991758303961, 0.328817017060207, 0.295330668877609, 0.254825604971803, 0.208534165703034, 0.157537879754125, 0.102739064044901, 0.0448684311756467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0253572157732049, 0.0887509630206024, 0.15, 0.208534165703034, 0.263603896932107, 0.314231274307001, 0.359167308680402, 0.396884705062547, 0.425658350974743, 0.443792810227634, 0.45, 0.443792810227634, 0.425658350974743, 0.396884705062547, 0.359167308680402, 0.314231274307001, 0.263603896932107, 0.208534165703034, 0.15, 0.0887509630206024, 0.0253572157732049, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0614745084375788, 0.127827739425975, 0.192451415095755, 0.254825604971803, 0.314231274307001, 0.369669914110089, 0.419765682192536, 0.462678607886602, 0.496112639464912, 0.517573536480541, 0.525, 0.517573536480541, 0.496112639464912, 0.462678607886602, 0.419765682192536, 0.369669914110089, 0.314231274307001, 0.254825604971803, 0.192451415095755, 0.127827739425975, 0.0614745084375788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0221475066960282, 0.0922252789298245, 0.161335664865292, 0.229179606750063, 0.295330668877609, 0.359167308680402, 0.419765682192536, 0.475735931288072, 0.525, 0.564589803375032, 0.590767078078676, 0.6, 0.590767078078676, 0.564589803375032, 0.525, 0.475735931288072, 0.419765682192536, 0.359167308680402, 0.295330668877609, 0.229179606750063, 0.161335664865292, 0.0922252789298245, 0.0221475066960282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0448684311756467, 0.116977011831709, 0.188487526462115, 0.259199719101185, 0.328817017060207, 0.396884705062547, 0.462678607886602, 0.525, 0.581801948466054, 0.629583654340201, 0.662829175487372, 0.675, 0.662829175487372, 0.629583654340201, 0.581801948466054, 0.525, 0.462678607886602, 0.396884705062547, 0.328817017060207, 0.259199719101185, 0.188487526462115, 0.116977011831709, 0.0448684311756467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0614745084375788, 0.135147072961082, 0.208534165703034, 0.281534156157351, 0.353991758303961, 0.425658350974743, 0.496112639464912, 0.564589803375032, 0.629583654340201, 0.687867965644036, 0.732294901687516, 0.75, 0.732294901687516, 0.687867965644036, 0.629583654340201, 0.564589803375032, 0.496112639464912, 0.425658350974743, 0.353991758303961, 0.281534156157351, 0.208534165703034, 0.135147072961082, 0.0614745084375788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0715979237109554, 0.146259328415933, 0.220846114639694, 0.295330668877609, 0.369669914110089, 0.443792810227634, 0.517573536480541, 0.590767078078676, 0.662829175487372, 0.732294901687516, 0.793933982822018, 0.825, 0.793933982822018, 0.732294901687516, 0.662829175487372, 0.590767078078676, 0.517573536480541, 0.443792810227634, 0.369669914110089, 0.295330668877609, 0.220846114639694, 0.146259328415933, 0.0715979237109554, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 1.11022302462516E-16, 0.0750000000000001, 0.15, 0.225, 0.3, 0.375, 0.45, 0.525, 0.6, 0.675, 0.75, 0.825, 0.9, 0.825, 0.75, 0.675, 0.6, 0.525, 0.45, 0.375, 0.3, 0.225, 0.15, 0.0462593284159333, 0.0351470729610824, 0.0169770118317087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0715979237109554, 0.146259328415933, 0.220846114639694, 0.295330668877609, 0.369669914110089, 0.443792810227634, 0.517573536480541, 0.590767078078676, 0.662829175487372, 0.732294901687516, 0.793933982822018, 0.825, 0.793933982822018, 0.732294901687516, 0.662829175487372, 0.590767078078676, 0.517573536480541, 0.443792810227634, 0.369669914110089, 0.295330668877609, 0.220846114639694, 0.125, 0.120846114639694, 0.108534165703034, 0.0884875264621147, 0.0613356648652923, 0.0278277394259751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0614745084375788, 0.135147072961082, 0.208534165703034, 0.281534156157351, 0.353991758303961, 0.425658350974743, 0.496112639464912, 0.564589803375032, 0.629583654340201, 0.687867965644036, 0.732294901687516, 0.75, 0.732294901687516, 0.687867965644036, 0.629583654340201, 0.564589803375032, 0.496112639464912, 0.425658350974743, 0.353991758303961, 0.281534156157351, 0.195330668877609, 0.2, 0.195330668877609, 0.181534156157351, 0.159199719101185, 0.129179606750063, 0.0924514150957548, 0.05, 0.00273906404490132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0448684311756467, 0.116977011831709, 0.188487526462115, 0.259199719101185, 0.328817017060207, 0.396884705062547, 0.462678607886602, 0.525, 0.581801948466054, 0.629583654340201, 0.662829175487372, 0.675, 0.662829175487372, 0.629583654340201, 0.581801948466054, 0.525, 0.462678607886602, 0.396884705062547, 0.328817017060207, 0.253991758303961, 0.269669914110089, 0.275, 0.269669914110089, 0.253991758303961, 0.228817017060207, 0.195330668877609, 0.154825604971803, 0.108534165703034, 0.0575378797541252, 0.00273906404490132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0221475066960282, 0.0922252789298245, 0.161335664865292, 0.229179606750063, 0.295330668877609, 0.359167308680402, 0.419765682192536, 0.475735931288072, 0.525, 0.564589803375032, 0.590767078078676, 0.6, 0.590767078078676, 0.564589803375032, 0.525, 0.475735931288072, 0.419765682192536, 0.359167308680402, 0.296884705062547, 0.325658350974743, 0.343792810227634, 0.35, 0.343792810227634, 0.325658350974743, 0.296884705062547, 0.259167308680402, 0.214231274307001, 0.163603896932107, 0.108534165703034, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0614745084375788, 0.127827739425975, 0.192451415095755, 0.254825604971803, 0.314231274307001, 0.369669914110089, 0.419765682192536, 0.462678607886602, 0.496112639464912, 0.517573536480541, 0.525, 0.517573536480541, 0.496112639464912, 0.462678607886602, 0.419765682192536, 0.369669914110089, 0.319765682192536, 0.362678607886603, 0.396112639464912, 0.417573536480541, 0.425, 0.417573536480541, 0.396112639464912, 0.362678607886603, 0.319765682192536, 0.269669914110089, 0.214231274307001, 0.154825604971803, 0.0924514150957548, 0.0278277394259751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0253572157732049, 0.0887509630206024, 0.15, 0.208534165703034, 0.263603896932107, 0.314231274307001, 0.359167308680402, 0.396884705062547, 0.425658350974743, 0.443792810227634, 0.45, 0.443792810227634, 0.425658350974743, 0.396884705062547, 0.359167308680402, 0.319765682192536, 0.375735931288072, 0.425, 0.464589803375032, 0.490767078078676, 0.5, 0.490767078078676, 0.464589803375032, 0.425, 0.375735931288072, 0.319765682192536, 0.259167308680402, 0.195330668877609, 0.129179606750063, 0.0613356648652923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0448684311756467, 0.102739064044901, 0.157537879754125, 0.208534165703034, 0.254825604971803, 0.295330668877609, 0.328817017060207, 0.353991758303961, 0.369669914110089, 0.375, 0.369669914110089, 0.353991758303961, 0.328817017060207, 0.296884705062547, 0.362678607886603, 0.425, 0.481801948466054, 0.529583654340201, 0.562829175487372, 0.575, 0.562829175487372, 0.529583654340201, 0.481801948466054, 0.425, 0.362678607886603, 0.296884705062547, 0.228817017060207, 0.159199719101185, 0.0884875264621147, 0.0169770118317087, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.051471862576143, 0.102739064044901, 0.15, 0.192451415095755, 0.229179606750063, 0.259199719101185, 0.281534156157351, 0.295330668877609, 0.3, 0.295330668877609, 0.281534156157351, 0.253991758303961, 0.325658350974743, 0.396112639464912, 0.464589803375032, 0.529583654340201, 0.587867965644036, 0.632294901687516, 0.65, 0.632294901687516, 0.587867965644036, 0.529583654340201, 0.464589803375032, 0.396112639464912, 0.325658350974743, 0.253991758303961, 0.181534156157351, 0.108534165703034, 0.0351470729610824, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0448684311756467, 0.0887509630206024, 0.127827739425975, 0.161335664865292, 0.188487526462115, 0.208534165703034, 0.220846114639694, 0.225, 0.220846114639694, 0.195330668877609, 0.269669914110089, 0.343792810227634, 0.417573536480541, 0.490767078078676, 0.562829175487372, 0.632294901687516, 0.693933982822018, 0.725, 0.693933982822018, 0.632294901687516, 0.562829175487372, 0.490767078078676, 0.417573536480541, 0.343792810227634, 0.269669914110089, 0.195330668877609, 0.120846114639694, 0.0462593284159333, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0253572157732049, 0.0614745084375788, 0.0922252789298245, 0.116977011831709, 0.135147072961082, 0.146259328415933, 0.15, 0.125, 0.2, 0.275, 0.35, 0.425, 0.5, 0.575, 0.65, 0.725, 0.8, 0.725, 0.65, 0.575, 0.5, 0.425, 0.35, 0.275, 0.2, 0.125, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0221475066960282, 0.0448684311756467, 0.0614745084375788, 0.0715979237109554, 0.0462593284159333, 0.120846114639694, 0.195330668877609, 0.269669914110089, 0.343792810227634, 0.417573536480541, 0.490767078078676, 0.562829175487372, 0.632294901687516, 0.693933982822018, 0.725, 0.693933982822018, 0.632294901687516, 0.562829175487372, 0.490767078078676, 0.417573536480541, 0.343792810227634, 0.269669914110089, 0.195330668877609, 0.120846114639694, 0.0462593284159333, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0351470729610824, 0.108534165703034, 0.181534156157351, 0.253991758303961, 0.325658350974743, 0.396112639464912, 0.464589803375032, 0.529583654340201, 0.587867965644036, 0.632294901687516, 0.65, 0.632294901687516, 0.587867965644036, 0.529583654340201, 0.464589803375032, 0.396112639464912, 0.325658350974743, 0.253991758303961, 0.181534156157351, 0.108534165703034, 0.0351470729610824, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0169770118317087, 0.0884875264621147, 0.159199719101185, 0.228817017060207, 0.296884705062547, 0.362678607886603, 0.425, 0.481801948466054, 0.529583654340201, 0.562829175487372, 0.575, 0.562829175487372, 0.529583654340201, 0.481801948466054, 0.425, 0.362678607886603, 0.296884705062547, 0.228817017060207, 0.159199719101185, 0.0884875264621147, 0.0169770118317087, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0613356648652923, 0.129179606750063, 0.195330668877609, 0.259167308680402, 0.319765682192536, 0.375735931288072, 0.425, 0.464589803375032, 0.490767078078676, 0.5, 0.490767078078676, 0.464589803375032, 0.425, 0.375735931288072, 0.319765682192536, 0.259167308680402, 0.195330668877609, 0.129179606750063, 0.0613356648652923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0278277394259751, 0.0924514150957548, 0.154825604971803, 0.214231274307001, 0.269669914110089, 0.319765682192536, 0.362678607886603, 0.396112639464912, 0.417573536480541, 0.425, 0.417573536480541, 0.396112639464912, 0.362678607886603, 0.319765682192536, 0.269669914110089, 0.214231274307001, 0.154825604971803, 0.0924514150957548, 0.0278277394259751, 0, 0, 0.0169770118317087, 0.0351470729610824, 0.0462593284159333, 0.05, 0.0462593284159333, 0.0351470729610824, 0.0169770118317087, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.108534165703034, 0.163603896932107, 0.214231274307001, 0.259167308680402, 0.296884705062547, 0.325658350974743, 0.343792810227634, 0.35, 0.343792810227634, 0.325658350974743, 0.296884705062547, 0.259167308680402, 0.214231274307001, 0.163603896932107, 0.108534165703034, 0.05, 0, 0.0278277394259751, 0.0613356648652923, 0.0884875264621147, 0.108534165703034, 0.120846114639694, 0.125, 0.120846114639694, 0.108534165703034, 0.0884875264621147, 0.0613356648652923 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00273906404490132, 0.0575378797541252, 0.108534165703034, 0.154825604971803, 0.195330668877609, 0.228817017060207, 0.253991758303961, 0.269669914110089, 0.275, 0.269669914110089, 0.253991758303961, 0.228817017060207, 0.195330668877609, 0.154825604971803, 0.108534165703034, 0.0575378797541252, 0.00273906404490132, 0.05, 0.0924514150957548, 0.129179606750063, 0.159199719101185, 0.181534156157351, 0.195330668877609, 0.2, 0.195330668877609, 0.181534156157351, 0.159199719101185, 0.129179606750063 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00273906404490132, 0.05, 0.0924514150957548, 0.129179606750063, 0.159199719101185, 0.181534156157351, 0.195330668877609, 0.2, 0.195330668877609, 0.181534156157351, 0.159199719101185, 0.129179606750063, 0.0924514150957548, 0.05, 0.00273906404490132, 0.0575378797541252, 0.108534165703034, 0.154825604971803, 0.195330668877609, 0.228817017060207, 0.253991758303961, 0.269669914110089, 0.275, 0.269669914110089, 0.253991758303961, 0.228817017060207, 0.195330668877609 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0278277394259751, 0.0613356648652923, 0.0884875264621147, 0.108534165703034, 0.120846114639694, 0.125, 0.120846114639694, 0.108534165703034, 0.0884875264621147, 0.0613356648652923, 0.0278277394259751, 0, 0.05, 0.108534165703034, 0.163603896932107, 0.214231274307001, 0.259167308680402, 0.296884705062547, 0.325658350974743, 0.343792810227634, 0.35, 0.343792810227634, 0.325658350974743, 0.296884705062547, 0.259167308680402 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0169770118317087, 0.0351470729610824, 0.0462593284159333, 0.05, 0.0462593284159333, 0.0351470729610824, 0.0169770118317087, 0, 0, 0.0278277394259751, 0.0924514150957548, 0.154825604971803, 0.214231274307001, 0.269669914110089, 0.319765682192536, 0.362678607886603, 0.396112639464912, 0.417573536480541, 0.425, 0.417573536480541, 0.396112639464912, 0.362678607886603, 0.319765682192536 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0613356648652923, 0.129179606750063, 0.195330668877609, 0.259167308680402, 0.319765682192536, 0.375735931288072, 0.425, 0.464589803375032, 0.490767078078676, 0.5, 0.490767078078676, 0.464589803375032, 0.425, 0.375735931288072 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0169770118317087, 0.0884875264621147, 0.159199719101185, 0.228817017060207, 0.296884705062547, 0.362678607886603, 0.425, 0.481801948466054, 0.529583654340201, 0.562829175487372, 0.575, 0.562829175487372, 0.529583654340201, 0.481801948466054, 0.425 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0351470729610824, 0.108534165703034, 0.181534156157351, 0.253991758303961, 0.325658350974743, 0.396112639464912, 0.464589803375032, 0.529583654340201, 0.587867965644036, 0.632294901687516, 0.65, 0.632294901687516, 0.587867965644036, 0.529583654340201, 0.464589803375032 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0462593284159333, 0.120846114639694, 0.195330668877609, 0.269669914110089, 0.343792810227634, 0.417573536480541, 0.490767078078676, 0.562829175487372, 0.632294901687516, 0.693933982822018, 0.725, 0.693933982822018, 0.632294901687516, 0.562829175487372, 0.490767078078676 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.125, 0.2, 0.275, 0.35, 0.425, 0.5, 0.575, 0.65, 0.725, 0.8, 0.725, 0.65, 0.575, 0.5 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0462593284159333, 0.120846114639694, 0.195330668877609, 0.269669914110089, 0.343792810227634, 0.417573536480541, 0.490767078078676, 0.562829175487372, 0.632294901687516, 0.693933982822018, 0.725, 0.693933982822018, 0.632294901687516, 0.562829175487372, 0.490767078078676 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0351470729610824, 0.108534165703034, 0.181534156157351, 0.253991758303961, 0.325658350974743, 0.396112639464912, 0.464589803375032, 0.529583654340201, 0.587867965644036, 0.632294901687516, 0.65, 0.632294901687516, 0.587867965644036, 0.529583654340201, 0.464589803375032 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0169770118317087, 0.0884875264621147, 0.159199719101185, 0.228817017060207, 0.296884705062547, 0.362678607886603, 0.425, 0.481801948466054, 0.529583654340201, 0.562829175487372, 0.575, 0.562829175487372, 0.529583654340201, 0.481801948466054, 0.425 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0613356648652923, 0.129179606750063, 0.195330668877609, 0.259167308680402, 0.319765682192536, 0.375735931288072, 0.425, 0.464589803375032, 0.490767078078676, 0.5, 0.490767078078676, 0.464589803375032, 0.425, 0.375735931288072 } };
        private double[,] pressureHeatValues;
        private double scale = 1;
        private List<Color> colorList;
        private List<string> colorNames = new List<string>();
        private List<string> rangesList = new List<string>();
        private List<ColorRange> capsColorRanges = new List<ColorRange>()
        {
            new ColorRange(0, 0.1, Color.Cyan),
            new ColorRange(0.1, 0.2, Color.Blue),
            new ColorRange(0.2, 0.3, Color.Green),
            new ColorRange(0.3, 0.4, Color.LightGreen),
            new ColorRange(0.4, 0.5, Color.Yellow),
            new ColorRange(0.5, 0.6, Color.Orange),
            new ColorRange(0.6, 0.7, Color.DarkOrange),
            new ColorRange(0.7, 0.8, Color.Salmon),
            new ColorRange(0.8, 0.9, Color.Red),
            new ColorRange(0.9, 1, Color.DarkRed)
        };
        private List<ColorRange> pressuresColorRanges = new List<ColorRange>()
        {
            new ColorRange(0, 0.1, Color.Cyan),
            new ColorRange(0.1, 0.2, Color.Blue),
            new ColorRange(0.2, 0.3, Color.Green),
            new ColorRange(0.3, 0.4, Color.LightGreen),
            new ColorRange(0.4, 0.5, Color.Yellow),
            new ColorRange(0.5, 0.6, Color.Orange),
            new ColorRange(0.6, 0.7, Color.DarkOrange),
            new ColorRange(0.7, 0.8, Color.Salmon),
            new ColorRange(0.8, 0.9, Color.Red),
            new ColorRange(0.9, 1, Color.DarkRed)
        };
        //private string input
        private string input = "";
        private double[,] inputArray = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.11022302462516E-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0221475066960282, 0.0448684311756467, 0.0614745084375788, 0.0715979237109554, 0.0750000000000001, 0.0715979237109554, 0.0614745084375788, 0.0448684311756467, 0.0221475066960282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0253572157732049, 0.0614745084375788, 0.0922252789298245, 0.116977011831709, 0.135147072961082, 0.146259328415933, 0.15, 0.146259328415933, 0.135147072961082, 0.116977011831709, 0.0922252789298245, 0.0614745084375788, 0.0253572157732049, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0448684311756467, 0.0887509630206024, 0.127827739425975, 0.161335664865292, 0.188487526462115, 0.208534165703034, 0.220846114639694, 0.225, 0.220846114639694, 0.208534165703034, 0.188487526462115, 0.161335664865292, 0.127827739425975, 0.0887509630206024, 0.0448684311756467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.051471862576143, 0.102739064044901, 0.15, 0.192451415095755, 0.229179606750063, 0.259199719101185, 0.281534156157351, 0.295330668877609, 0.3, 0.295330668877609, 0.281534156157351, 0.259199719101185, 0.229179606750063, 0.192451415095755, 0.15, 0.102739064044901, 0.051471862576143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0448684311756467, 0.102739064044901, 0.157537879754125, 0.208534165703034, 0.254825604971803, 0.295330668877609, 0.328817017060207, 0.353991758303961, 0.369669914110089, 0.375, 0.369669914110089, 0.353991758303961, 0.328817017060207, 0.295330668877609, 0.254825604971803, 0.208534165703034, 0.157537879754125, 0.102739064044901, 0.0448684311756467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0253572157732049, 0.0887509630206024, 0.15, 0.208534165703034, 0.263603896932107, 0.314231274307001, 0.359167308680402, 0.396884705062547, 0.425658350974743, 0.443792810227634, 0.45, 0.443792810227634, 0.425658350974743, 0.396884705062547, 0.359167308680402, 0.314231274307001, 0.263603896932107, 0.208534165703034, 0.15, 0.0887509630206024, 0.0253572157732049, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0614745084375788, 0.127827739425975, 0.192451415095755, 0.254825604971803, 0.314231274307001, 0.369669914110089, 0.419765682192536, 0.462678607886602, 0.496112639464912, 0.517573536480541, 0.525, 0.517573536480541, 0.496112639464912, 0.462678607886602, 0.419765682192536, 0.369669914110089, 0.314231274307001, 0.254825604971803, 0.192451415095755, 0.127827739425975, 0.0614745084375788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0221475066960282, 0.0922252789298245, 0.161335664865292, 0.229179606750063, 0.295330668877609, 0.359167308680402, 0.419765682192536, 0.475735931288072, 0.525, 0.564589803375032, 0.590767078078676, 0.6, 0.590767078078676, 0.564589803375032, 0.525, 0.475735931288072, 0.419765682192536, 0.359167308680402, 0.295330668877609, 0.229179606750063, 0.161335664865292, 0.0922252789298245, 0.0221475066960282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0448684311756467, 0.116977011831709, 0.188487526462115, 0.259199719101185, 0.328817017060207, 0.396884705062547, 0.462678607886602, 0.525, 0.581801948466054, 0.629583654340201, 0.662829175487372, 0.675, 0.662829175487372, 0.629583654340201, 0.581801948466054, 0.525, 0.462678607886602, 0.396884705062547, 0.328817017060207, 0.259199719101185, 0.188487526462115, 0.116977011831709, 0.0448684311756467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0614745084375788, 0.135147072961082, 0.208534165703034, 0.281534156157351, 0.353991758303961, 0.425658350974743, 0.496112639464912, 0.564589803375032, 0.629583654340201, 0.687867965644036, 0.732294901687516, 0.75, 0.732294901687516, 0.687867965644036, 0.629583654340201, 0.564589803375032, 0.496112639464912, 0.425658350974743, 0.353991758303961, 0.281534156157351, 0.208534165703034, 0.135147072961082, 0.0614745084375788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0715979237109554, 0.146259328415933, 0.220846114639694, 0.295330668877609, 0.369669914110089, 0.443792810227634, 0.517573536480541, 0.590767078078676, 0.662829175487372, 0.732294901687516, 0.793933982822018, 0.825, 0.793933982822018, 0.732294901687516, 0.662829175487372, 0.590767078078676, 0.517573536480541, 0.443792810227634, 0.369669914110089, 0.295330668877609, 0.220846114639694, 0.146259328415933, 0.0715979237109554, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 1.11022302462516E-16, 0.0750000000000001, 0.15, 0.225, 0.3, 0.375, 0.45, 0.525, 0.6, 0.675, 0.75, 0.825, 0.9, 0.825, 0.75, 0.675, 0.6, 0.525, 0.45, 0.375, 0.3, 0.225, 0.15, 0.0462593284159333, 0.0351470729610824, 0.0169770118317087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0715979237109554, 0.146259328415933, 0.220846114639694, 0.295330668877609, 0.369669914110089, 0.443792810227634, 0.517573536480541, 0.590767078078676, 0.662829175487372, 0.732294901687516, 0.793933982822018, 0.825, 0.793933982822018, 0.732294901687516, 0.662829175487372, 0.590767078078676, 0.517573536480541, 0.443792810227634, 0.369669914110089, 0.295330668877609, 0.220846114639694, 0.125, 0.120846114639694, 0.108534165703034, 0.0884875264621147, 0.0613356648652923, 0.0278277394259751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0614745084375788, 0.135147072961082, 0.208534165703034, 0.281534156157351, 0.353991758303961, 0.425658350974743, 0.496112639464912, 0.564589803375032, 0.629583654340201, 0.687867965644036, 0.732294901687516, 0.75, 0.732294901687516, 0.687867965644036, 0.629583654340201, 0.564589803375032, 0.496112639464912, 0.425658350974743, 0.353991758303961, 0.281534156157351, 0.195330668877609, 0.2, 0.195330668877609, 0.181534156157351, 0.159199719101185, 0.129179606750063, 0.0924514150957548, 0.05, 0.00273906404490132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0448684311756467, 0.116977011831709, 0.188487526462115, 0.259199719101185, 0.328817017060207, 0.396884705062547, 0.462678607886602, 0.525, 0.581801948466054, 0.629583654340201, 0.662829175487372, 0.675, 0.662829175487372, 0.629583654340201, 0.581801948466054, 0.525, 0.462678607886602, 0.396884705062547, 0.328817017060207, 0.253991758303961, 0.269669914110089, 0.275, 0.269669914110089, 0.253991758303961, 0.228817017060207, 0.195330668877609, 0.154825604971803, 0.108534165703034, 0.0575378797541252, 0.00273906404490132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0221475066960282, 0.0922252789298245, 0.161335664865292, 0.229179606750063, 0.295330668877609, 0.359167308680402, 0.419765682192536, 0.475735931288072, 0.525, 0.564589803375032, 0.590767078078676, 0.6, 0.590767078078676, 0.564589803375032, 0.525, 0.475735931288072, 0.419765682192536, 0.359167308680402, 0.296884705062547, 0.325658350974743, 0.343792810227634, 0.35, 0.343792810227634, 0.325658350974743, 0.296884705062547, 0.259167308680402, 0.214231274307001, 0.163603896932107, 0.108534165703034, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0614745084375788, 0.127827739425975, 0.192451415095755, 0.254825604971803, 0.314231274307001, 0.369669914110089, 0.419765682192536, 0.462678607886602, 0.496112639464912, 0.517573536480541, 0.525, 0.517573536480541, 0.496112639464912, 0.462678607886602, 0.419765682192536, 0.369669914110089, 0.319765682192536, 0.362678607886603, 0.396112639464912, 0.417573536480541, 0.425, 0.417573536480541, 0.396112639464912, 0.362678607886603, 0.319765682192536, 0.269669914110089, 0.214231274307001, 0.154825604971803, 0.0924514150957548, 0.0278277394259751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0253572157732049, 0.0887509630206024, 0.15, 0.208534165703034, 0.263603896932107, 0.314231274307001, 0.359167308680402, 0.396884705062547, 0.425658350974743, 0.443792810227634, 0.45, 0.443792810227634, 0.425658350974743, 0.396884705062547, 0.359167308680402, 0.319765682192536, 0.375735931288072, 0.425, 0.464589803375032, 0.490767078078676, 0.5, 0.490767078078676, 0.464589803375032, 0.425, 0.375735931288072, 0.319765682192536, 0.259167308680402, 0.195330668877609, 0.129179606750063, 0.0613356648652923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0448684311756467, 0.102739064044901, 0.157537879754125, 0.208534165703034, 0.254825604971803, 0.295330668877609, 0.328817017060207, 0.353991758303961, 0.369669914110089, 0.375, 0.369669914110089, 0.353991758303961, 0.328817017060207, 0.296884705062547, 0.362678607886603, 0.425, 0.481801948466054, 0.529583654340201, 0.562829175487372, 0.575, 0.562829175487372, 0.529583654340201, 0.481801948466054, 0.425, 0.362678607886603, 0.296884705062547, 0.228817017060207, 0.159199719101185, 0.0884875264621147, 0.0169770118317087, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.051471862576143, 0.102739064044901, 0.15, 0.192451415095755, 0.229179606750063, 0.259199719101185, 0.281534156157351, 0.295330668877609, 0.3, 0.295330668877609, 0.281534156157351, 0.253991758303961, 0.325658350974743, 0.396112639464912, 0.464589803375032, 0.529583654340201, 0.587867965644036, 0.632294901687516, 0.65, 0.632294901687516, 0.587867965644036, 0.529583654340201, 0.464589803375032, 0.396112639464912, 0.325658350974743, 0.253991758303961, 0.181534156157351, 0.108534165703034, 0.0351470729610824, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0448684311756467, 0.0887509630206024, 0.127827739425975, 0.161335664865292, 0.188487526462115, 0.208534165703034, 0.220846114639694, 0.225, 0.220846114639694, 0.195330668877609, 0.269669914110089, 0.343792810227634, 0.417573536480541, 0.490767078078676, 0.562829175487372, 0.632294901687516, 0.693933982822018, 0.725, 0.693933982822018, 0.632294901687516, 0.562829175487372, 0.490767078078676, 0.417573536480541, 0.343792810227634, 0.269669914110089, 0.195330668877609, 0.120846114639694, 0.0462593284159333, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0253572157732049, 0.0614745084375788, 0.0922252789298245, 0.116977011831709, 0.135147072961082, 0.146259328415933, 0.15, 0.125, 0.2, 0.275, 0.35, 0.425, 0.5, 0.575, 0.65, 0.725, 0.8, 0.725, 0.65, 0.575, 0.5, 0.425, 0.35, 0.275, 0.2, 0.125, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0221475066960282, 0.0448684311756467, 0.0614745084375788, 0.0715979237109554, 0.0462593284159333, 0.120846114639694, 0.195330668877609, 0.269669914110089, 0.343792810227634, 0.417573536480541, 0.490767078078676, 0.562829175487372, 0.632294901687516, 0.693933982822018, 0.725, 0.693933982822018, 0.632294901687516, 0.562829175487372, 0.490767078078676, 0.417573536480541, 0.343792810227634, 0.269669914110089, 0.195330668877609, 0.120846114639694, 0.0462593284159333, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0351470729610824, 0.108534165703034, 0.181534156157351, 0.253991758303961, 0.325658350974743, 0.396112639464912, 0.464589803375032, 0.529583654340201, 0.587867965644036, 0.632294901687516, 0.65, 0.632294901687516, 0.587867965644036, 0.529583654340201, 0.464589803375032, 0.396112639464912, 0.325658350974743, 0.253991758303961, 0.181534156157351, 0.108534165703034, 0.0351470729610824, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0169770118317087, 0.0884875264621147, 0.159199719101185, 0.228817017060207, 0.296884705062547, 0.362678607886603, 0.425, 0.481801948466054, 0.529583654340201, 0.562829175487372, 0.575, 0.562829175487372, 0.529583654340201, 0.481801948466054, 0.425, 0.362678607886603, 0.296884705062547, 0.228817017060207, 0.159199719101185, 0.0884875264621147, 0.0169770118317087, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0613356648652923, 0.129179606750063, 0.195330668877609, 0.259167308680402, 0.319765682192536, 0.375735931288072, 0.425, 0.464589803375032, 0.490767078078676, 0.5, 0.490767078078676, 0.464589803375032, 0.425, 0.375735931288072, 0.319765682192536, 0.259167308680402, 0.195330668877609, 0.129179606750063, 0.0613356648652923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0278277394259751, 0.0924514150957548, 0.154825604971803, 0.214231274307001, 0.269669914110089, 0.319765682192536, 0.362678607886603, 0.396112639464912, 0.417573536480541, 0.425, 0.417573536480541, 0.396112639464912, 0.362678607886603, 0.319765682192536, 0.269669914110089, 0.214231274307001, 0.154825604971803, 0.0924514150957548, 0.0278277394259751, 0, 0, 0.0169770118317087, 0.0351470729610824, 0.0462593284159333, 0.05, 0.0462593284159333, 0.0351470729610824, 0.0169770118317087, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.108534165703034, 0.163603896932107, 0.214231274307001, 0.259167308680402, 0.296884705062547, 0.325658350974743, 0.343792810227634, 0.35, 0.343792810227634, 0.325658350974743, 0.296884705062547, 0.259167308680402, 0.214231274307001, 0.163603896932107, 0.108534165703034, 0.05, 0, 0.0278277394259751, 0.0613356648652923, 0.0884875264621147, 0.108534165703034, 0.120846114639694, 0.125, 0.120846114639694, 0.108534165703034, 0.0884875264621147, 0.0613356648652923 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00273906404490132, 0.0575378797541252, 0.108534165703034, 0.154825604971803, 0.195330668877609, 0.228817017060207, 0.253991758303961, 0.269669914110089, 0.275, 0.269669914110089, 0.253991758303961, 0.228817017060207, 0.195330668877609, 0.154825604971803, 0.108534165703034, 0.0575378797541252, 0.00273906404490132, 0.05, 0.0924514150957548, 0.129179606750063, 0.159199719101185, 0.181534156157351, 0.195330668877609, 0.2, 0.195330668877609, 0.181534156157351, 0.159199719101185, 0.129179606750063 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00273906404490132, 0.05, 0.0924514150957548, 0.129179606750063, 0.159199719101185, 0.181534156157351, 0.195330668877609, 0.2, 0.195330668877609, 0.181534156157351, 0.159199719101185, 0.129179606750063, 0.0924514150957548, 0.05, 0.00273906404490132, 0.0575378797541252, 0.108534165703034, 0.154825604971803, 0.195330668877609, 0.228817017060207, 0.253991758303961, 0.269669914110089, 0.275, 0.269669914110089, 0.253991758303961, 0.228817017060207, 0.195330668877609 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0278277394259751, 0.0613356648652923, 0.0884875264621147, 0.108534165703034, 0.120846114639694, 0.125, 0.120846114639694, 0.108534165703034, 0.0884875264621147, 0.0613356648652923, 0.0278277394259751, 0, 0.05, 0.108534165703034, 0.163603896932107, 0.214231274307001, 0.259167308680402, 0.296884705062547, 0.325658350974743, 0.343792810227634, 0.35, 0.343792810227634, 0.325658350974743, 0.296884705062547, 0.259167308680402 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0169770118317087, 0.0351470729610824, 0.0462593284159333, 0.05, 0.0462593284159333, 0.0351470729610824, 0.0169770118317087, 0, 0, 0.0278277394259751, 0.0924514150957548, 0.154825604971803, 0.214231274307001, 0.269669914110089, 0.319765682192536, 0.362678607886603, 0.396112639464912, 0.417573536480541, 0.425, 0.417573536480541, 0.396112639464912, 0.362678607886603, 0.319765682192536 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0613356648652923, 0.129179606750063, 0.195330668877609, 0.259167308680402, 0.319765682192536, 0.375735931288072, 0.425, 0.464589803375032, 0.490767078078676, 0.5, 0.490767078078676, 0.464589803375032, 0.425, 0.375735931288072 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0169770118317087, 0.0884875264621147, 0.159199719101185, 0.228817017060207, 0.296884705062547, 0.362678607886603, 0.425, 0.481801948466054, 0.529583654340201, 0.562829175487372, 0.575, 0.562829175487372, 0.529583654340201, 0.481801948466054, 0.425 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0351470729610824, 0.108534165703034, 0.181534156157351, 0.253991758303961, 0.325658350974743, 0.396112639464912, 0.464589803375032, 0.529583654340201, 0.587867965644036, 0.632294901687516, 0.65, 0.632294901687516, 0.587867965644036, 0.529583654340201, 0.464589803375032 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0462593284159333, 0.120846114639694, 0.195330668877609, 0.269669914110089, 0.343792810227634, 0.417573536480541, 0.490767078078676, 0.562829175487372, 0.632294901687516, 0.693933982822018, 0.725, 0.693933982822018, 0.632294901687516, 0.562829175487372, 0.490767078078676 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.125, 0.2, 0.275, 0.35, 0.425, 0.5, 0.575, 0.65, 0.725, 0.8, 0.725, 0.65, 0.575, 0.5 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0462593284159333, 0.120846114639694, 0.195330668877609, 0.269669914110089, 0.343792810227634, 0.417573536480541, 0.490767078078676, 0.562829175487372, 0.632294901687516, 0.693933982822018, 0.725, 0.693933982822018, 0.632294901687516, 0.562829175487372, 0.490767078078676 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0351470729610824, 0.108534165703034, 0.181534156157351, 0.253991758303961, 0.325658350974743, 0.396112639464912, 0.464589803375032, 0.529583654340201, 0.587867965644036, 0.632294901687516, 0.65, 0.632294901687516, 0.587867965644036, 0.529583654340201, 0.464589803375032 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0169770118317087, 0.0884875264621147, 0.159199719101185, 0.228817017060207, 0.296884705062547, 0.362678607886603, 0.425, 0.481801948466054, 0.529583654340201, 0.562829175487372, 0.575, 0.562829175487372, 0.529583654340201, 0.481801948466054, 0.425 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0613356648652923, 0.129179606750063, 0.195330668877609, 0.259167308680402, 0.319765682192536, 0.375735931288072, 0.425, 0.464589803375032, 0.490767078078676, 0.5, 0.490767078078676, 0.464589803375032, 0.425, 0.375735931288072 } };
        private char startChar = '<';
        private char endChar = '>';
        private char valueSeperatorChar = ',';
        private char lineSeperatorChar = ':';

        //For MouseMove Event
        private Point? prevPosition = null;
        private ToolTip tooltip = new ToolTip();

        //For Resizing
        private StretchDirection stretchDirection = StretchDirection.Horizontal;
        private bool autoResizeChart = false;
        private Size originalSize;
        private bool originalSizeDetermined = false;
        private int heatMapsDivider = 20;

        //For Color Blending
        private int squareDivider = 7;

        //For Sampling
        private Area selectedArea = null;
        private bool isMouseDown = false;
        private int clicks = 0;
        private bool isSelectionAllowed = true;

        //Tau
        private bool isTauAdjustmentOn = false;
        private double tauValue = 0.4;

        //Direct2D
        public Graphics MyGraphics;
        private GraphicsPath BaseSquarePath = new GraphicsPath();
        private GraphicsPath BaseGridPath = new GraphicsPath();
        public SizeF squareSize = new SizeF(30, 40);
        private bool autoResizeHeatmap = false;
        private Size originalHeatmapSize;
        private bool originalHeatmapSizeDetermined = false;
        private bool smoothImage = true;
        private bool isShowBlur = false;

        private SerialPortDataReciever serialPortDataReciever;
        private string comPort = "COM8";
        private bool isDevelopmentMode = false;

        private double[,] offsetValues = null;

        private BluetoothDataProcessor bluetoothDataProcessor;

        private bool manualLut = false;
        private double manualCoef0 = 0;
        private double manualCoef1 = 0;
        private double manualCoef2 = 0;
        private double manualCoef3 = 0;
        private bool isNoLutMode = false;

        private Size maxSize = new Size(int.MaxValue, int.MaxValue);
        private bool stretchToMaxMode = false;
        private Size currentSize = new Size();

        private ConnectionType currentConnectionType = ConnectionType.NotConnected;

        public delegate void EventHandler_Size(Size size);
        public delegate void EventHandler_ConnectionType(ConnectionType connectionType);
        public delegate void EventHandler_Frame(Frame frame);
        public delegate void EventHandler_Void();
        public delegate void EventHandler_Meta(List<string> metadata);

        public event EventHandler_Size SizeChanged_Event;
        public event EventHandler_ConnectionType ConnectionTypeChanged_Event;
        public event EventHandler_Void GotBluetoothDetails_Event;
        public event EventHandler_Frame SelectedFrameArrived_Event;
        public event EventHandler_Void SerialPortClosed_Event;
        public event EventHandler_Meta MetaSend_Event;


        public string[] ranges
        {
            get { return rangesList.ToArray(); }
            set { rangesList = value.ToList(); }
        }

        public List<ColorRange> CapsColorRanges
        {
            get { return capsColorRanges; }
            //set { colorRanges = value; }
        }

        public List<ColorRange> PressuresColorRanges
        {
            get { return pressuresColorRanges; }
        }

        public string Input
        {
            get { return input; }
            set { input = value; }
        }
        /*
        public double[,] InputArray
        {
            get { return inputArray; }
            set { inputArray = value; }
        }
        */
        public char StartChar
        {
            get { return startChar; }
            set { startChar = value; }
        }

        public char EndChar
        {
            get { return endChar; }
            set { endChar = value; }
        }

        public char ValueSeperatorChar
        {
            get { return valueSeperatorChar; }
            set { valueSeperatorChar = value; }
        }

        public char LineSeperatorChar
        {
            get { return lineSeperatorChar; }
            set { lineSeperatorChar = value; }
        }

        public double ScaleMultiplier
        {
            get { return scale; }
            set { scale = value; }
        }

        public StretchDirection StretchDirection
        {
            get { return stretchDirection; }
            set { stretchDirection = value; }
        }

        public bool SmoothImage
        {
            get { return smoothImage; }
            set { smoothImage = value; }
        }

        public string ComPort
        {
            get { return comPort; }
            set { comPort = value; }
        }

        public bool ManualLut
        {
            get { return manualLut; }
            set { manualLut = value; }
        }

        public double ManualCoef0
        {
            get { return manualCoef0; }
            set { manualCoef0 = value; }
        }

        public double ManualCoef1
        {
            get { return manualCoef1; }
            set { manualCoef1 = value; }
        }

        public double ManualCoef2
        {
            get { return manualCoef2; }
            set { manualCoef2 = value; }
        }

        public double ManualCoef3
        {
            get { return manualCoef3; }
            set { manualCoef3 = value; }
        }

        public bool StretchToMaxMode
        {
            get { return stretchToMaxMode; }
            set { stretchToMaxMode = value; }
        }

        public ucHeatMap()
        {
            InitializeComponent();
        }

        private void ucHeatMap_Load(object sender, EventArgs e)
        {
            currentSize = Size;
            pressureHeatValues = GetPressureHeatValuesManual();
            LoadHeatMap();

            CreateBaseSquarePath();
            //CreateGridPath();

            serialPortDataReciever = new SerialPortDataReciever(ComPort);
            serialPortDataReciever.DataArrived_Event += SerialPortDataReciever_DataArrived_Event;
            serialPortDataReciever.MetaArrived_Event += SerialPortDataReciever_MetaArrived_Event;
            serialPortDataReciever.PortClosed_Event += SerialPortDataReciever_PortClosed_Event;

            bluetoothDataProcessor = new BluetoothDataProcessor();
            bluetoothDataProcessor.BluetoothMatArrived_Event += BluetoothDataProcessor_BluetoothMatArrived_Event;
            bluetoothDataProcessor.GotDetails_Event += BluetoothDataProcessor_GotDetails_Event;
        }

        private void BluetoothDataProcessor_GotDetails_Event()
        {
            GotBluetoothDetails_Event?.Invoke();
        }

        private void SerialPortDataReciever_PortClosed_Event()
        {
            SetConnectionType(ConnectionType.NotConnected);
            SerialPortClosed_Event?.Invoke();
        }

        private void BluetoothDataProcessor_BluetoothMatArrived_Event(double[,] matData)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new BluetoothDataProcessor.EventHandler_MatData(BluetoothDataProcessor_BluetoothMatArrived_Event), new object[] { matData });
                return;
            }

            SetNewInputArray(matData);
            SetConnectionType(ConnectionType.Bluetooth);
        }

        private void SerialPortDataReciever_DataArrived_Event(double[,] data)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new SerialPortDataReciever.EventHandler_Data(SerialPortDataReciever_DataArrived_Event), new object[] { data });
                return;
            }
            if (offsetValues == null) SetNewInputArray(data);
            else SetNewInputArray(PerformOffset(data));
            if (serialPortDataReciever.IsInProgress()) SetConnectionType(ConnectionType.Serial);
        }

        private void SerialPortDataReciever_MetaArrived_Event(List<string> metadata)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new SerialPortDataReciever.EventHandler_Meta(SerialPortDataReciever_MetaArrived_Event), new object[] { metadata });
                return;
            }

            // Raise the event so Form1 can listen to it
            MetaSend_Event?.Invoke(metadata);
        }


        public void SetNewInput(string newInput)
        {
            input = newInput;
            LoadHeatMap();
        }

        public void SetNewInputArray(double[,] newInputArray)
        {
            inputArray = newInputArray;
            isNoLutMode = false;

            if (isTauAdjustmentOn) capHeatValues = GetTauAdjustedArray(inputArray);
            else capHeatValues = inputArray;

            if (manualLut) pressureHeatValues = GetPressureHeatValuesManual();
            else pressureHeatValues = GetPressureHeatValues();

            //if (input.Length == 0) capHeatValues = inputArray; //RotateArray(inputArray);
            //else capHeatValues = ParseInput();

            //if (!isNoLutMode)
            //{
            //    if (manualLut) pressureHeatValues = GetPressureHeatValuesManual();
            //    else pressureHeatValues = GetPressureHeatValues();
            //}

            if (selectedArea != null) SelectedFrameArrived_Event?.Invoke(GetSelectedAreaFrame());

            LoadHeatMap();
        }

        public void SetNewScale(double newScale)
        {
            scale = newScale;
            LoadHeatMap();
        }

        public void SetSmoothImage(bool value)
        {
            smoothImage = value;
            LoadHeatMap();
        }

        public void SetManualCoefficient(int coefficient, double value)
        {
            switch (coefficient)
            {
                case 0: manualCoef0 = value; break;
                case 1: manualCoef1 = value; break;
                case 2: manualCoef2 = value; break;
                case 3: manualCoef3 = value; break;
            }
            LoadHeatMap();
        }

        public void SetManualLut(bool isManualLut)
        {
            manualLut = isManualLut;
            LoadHeatMap();
        }

        public void SetMaxSize(Size size)
        {
            maxSize = size;
            LoadHeatMap();
        }

        public void SetOffset()
        {
            SetOffset(CloneArray(capHeatValues));
        }

        public void SetOffset(double[,] offset)
        {
            offsetValues = offset;
        }

        public void ClearOffset()
        {
            offsetValues = null;
        }

        public void ClearSelection()
        {
            if (isSelectionAllowed) selectedArea = null;
        }

        public void BlockSelection()
        {
            isSelectionAllowed = false;
        }

        public void UnblockSelection()
        {
            isSelectionAllowed = true;
        }

        public void SetStretchToMaxMode(bool isStretchToMaxMode)
        {
            stretchToMaxMode = isStretchToMaxMode;
            LoadHeatMap();
        }

        public void SetMaxValue(int maxValue)
        {
            SerialPortDataReciever.MAX_VALUE = maxValue;
        }

        public void SetDevelopmentMode(bool value)
        {
            isDevelopmentMode = value;
        }

        public void ToggleBlur()
        {
            isShowBlur = !isShowBlur;
        }

        public void SetIsTauAdjustmentOn(bool isTauOn)
        {
            isTauAdjustmentOn = isTauOn;
        }

        public void SetTauAdjustmentValue(double value)
        {
            tauValue = value;
        }

        public void SetColorRanges(List<ColorRange> colorRanges, HeatMapType type)
        {
            if (type == HeatMapType.Caps) capsColorRanges = colorRanges;
            else pressuresColorRanges = colorRanges;
        }

        public bool ConnectToSerialPort()
        {
            return ConnectToSerialPort(true);
        }

        public bool ConnectToSerialPort(bool isShowMessages)
        {
            serialPortDataReciever.ComPort = ComPort;
            serialPortDataReciever.IsDevelopmentMode = isDevelopmentMode;
            return serialPortDataReciever.Connect(isShowMessages);
        }

        public void DisconnectFromSerialPort()
        {
            serialPortDataReciever.Disconnect();
            SetConnectionType(ConnectionType.NotConnected);
        }

        public void ProcessBluetoothData(byte[] data)
        {
            bluetoothDataProcessor.ProcessData(data);
        }

        public void StartRequestSequence()
        {
            Request.SendStartSequenceAsync(serialPortDataReciever.port);
        }

        public void StopRequestSequence()
        {
            Request.StopStartSequence();
        }

        public void CancelSerialPortConnection()
        {
            serialPortDataReciever.Stop();
        }

        public void SimulateDevelopment()
        {
            serialPortDataReciever.SimulateDevelopment();
        }

        public SerialPort GetSerialPort()
        {
            return serialPortDataReciever.port;
        }

        public Area GetSelectedArea()
        {
            return selectedArea;
        }

        public Frame GetFrame()
        {
            return new Frame(CloneArray(capHeatValues), CloneArray(pressureHeatValues));
        }

        public Frame GetSelectedAreaFrame()
        {
            if (selectedArea == null) return null;

            return new Frame(CloneArray(capHeatValues, selectedArea), CloneArray(pressureHeatValues, selectedArea));
        }

        public void SetFrame(Frame frame)
        {
            capHeatValues = frame.Caps; //inputArray = frame.Caps;
            pressureHeatValues = frame.Pressures;
            isNoLutMode = true;
            LoadHeatMap();
        }

        public void SetConnectionType(ConnectionType connectionType)
        {
            if (currentConnectionType == connectionType) return;
            currentConnectionType = connectionType;
            ConnectionTypeChanged_Event?.Invoke(currentConnectionType);
        }

        public int GetDividerLength()
        {
            return heatMapsDivider;
        }

        public ConnectionType GetConnectionType()
        {
            return currentConnectionType;
        }

        private void LoadHeatMap()
        {
            colorList = new List<Color>() { Color.Blue, Color.Cyan, Color.YellowGreen, Color.Orange, Color.Red };
            colorNames = GetColorNameList();

            /*
            if (input.Length == 0) capHeatValues = inputArray; //RotateArray(inputArray);
            else capHeatValues = ParseInput();

            if (!isNoLutMode)
            {
                if (manualLut) pressureHeatValues = GetPressureHeatValuesManual();
                else pressureHeatValues = GetPressureHeatValues();
            }
            */

            //======================Direct2D==============================
            SetPixelSize();
            AdjustSize();
            //============================================================
        }

        private double[,] GetData(int width, int height)
        {
            double[,] result = new double[width, height];
            Random rnd = new Random();
            for (int i = 0; i < width; i++)
            {
                for (int j = 0; j < height; j++)
                {

                    //result[i, j] = rnd.Next(5);
                    result[i, j] = rnd.NextDouble();
                }
            }
            return result;
        }

        private string GetColorNameFromRangeStr(string rangeStr)
        {
            string colorName = rangeStr.Substring(rangeStr.IndexOf(' ') + 1);
            colorName = string.Concat(colorName[0].ToString().ToUpper(), colorName.Substring(1));
            while (colorName.Contains(' '))
            {
                int seperatorIndex = colorName.IndexOf(' ');
                colorName = string.Concat(colorName.Substring(0, seperatorIndex),
                    colorName[seperatorIndex + 1].ToString().ToUpper(),
                    colorName.Substring(seperatorIndex + 2));
            }
            return colorName;
        }

        private List<string> GetColorNameList()
        {
            List<string> result = new List<string>();
            if (rangesList.Count == 0)
            {
                for (int i = 0; i < capsColorRanges.Count; i++)
                {
                    ColorRange range = capsColorRanges[i];
                    result.Add(range.Color.Name);
                }
            }
            else
            {
                for (int i = 0; i < rangesList.Count; i++)
                {
                    string range = rangesList[i];
                    result.Add(GetColorNameFromRangeStr(range));
                }
            }
            return result;
        }

        private string GetColorNameFromHeatValue(double heatValue)
        {
            if (rangesList.Count == 0)
            {
                for (int i = 0; i < capsColorRanges.Count; i++)
                {
                    ColorRange range = capsColorRanges[i];
                    if (range.Start <= heatValue && heatValue <= range.End)
                        return range.Color.Name;
                }
            }
            else
            {
                for (int i = 0; i < rangesList.Count; i++)
                {
                    string rangeStr = rangesList[i];
                    int rangeSeperatorIndex = rangeStr.IndexOf('-');
                    double min = double.Parse(rangeStr.Substring(0, rangeSeperatorIndex));
                    double max = double.Parse(rangeStr.Substring(rangeSeperatorIndex + 1, rangeStr.IndexOf(' ') - rangeSeperatorIndex - 1));
                    if (min <= heatValue && heatValue <= max)
                        return GetColorNameFromRangeStr(rangeStr);
                }
            }
            return "";
        }

        private double[,] ParseInput()
        {
            string inputE = input;
            inputE = TrimInput(inputE);

            int width = GetWidthFromInput(inputE);
            int height = inputE.Count(chr => chr == ':') + 1;
            double[,] result = new double[height, width];

            char c = inputE[0];
            for (int line = 0; line < height; line++)
            {
                for (int col = 0; col < width; col++)
                {
                    int valueLength;
                    int l1 = inputE.IndexOf(valueSeperatorChar);
                    int l2 = inputE.IndexOf(lineSeperatorChar);
                    if (l1 == -1 && l2 == -1) valueLength = inputE.Length;
                    else if (l1 == -1) valueLength = l2;
                    else if (l2 == -1) valueLength = l1;
                    else valueLength = Math.Min(l1, l2);
                    double value = double.Parse(inputE.Substring(0, valueLength));
                    result[line, col] = value;
                    if (valueLength != inputE.Length) inputE = inputE.Substring(valueLength + 1);
                }
            }
            return result;
        }

        private string TrimInput(string input)
        {
            int startIndex = input.IndexOf(startChar) + 1;
            return input.Substring(startIndex, input.IndexOf(endChar) - startIndex);
        }

        private int GetWidthFromInput(string input)
        {
            char c = input[0];
            int index = 0;
            int counter = 0;
            while (c != lineSeperatorChar)
            {
                if (c == valueSeperatorChar) counter++;
                index++;
                c = input[index];
            }
            return counter + 1;
        }

        private double ScaleHeatValue(double heatValue)
        {
            double newValue = heatValue * scale;
            //if (newValue > 1) newValue = 1;
            return newValue;
        }

        private double[,] PerformOffset(double[,] data)
        {
            if (offsetValues == null) return data;

            double[,] result = new double[data.GetLength(0), data.GetLength(1)];

            for (int i = 0; i < data.GetLength(0); i++)
            {
                for (int j = 0; j < data.GetLength(1); j++)
                {
                    result[i, j] = data[i, j] - offsetValues[i, j];
                }
            }

            return result;
        }

        private void AdjustControlSize()
        {
            int dataWidth = capHeatValues.GetLength(0);
            int dataHeight = capHeatValues.GetLength(1);

            double ratio = (double)dataWidth / (double)dataHeight;

            switch (stretchDirection)
            {
                case StretchDirection.Horizontal:
                    Size = new Size((int)(originalSize.Height * ratio), originalSize.Height);
                    break;

                case StretchDirection.Vertical:
                    Size = new Size(originalSize.Width, (int)(originalSize.Width / ratio));
                    break;
            }
        }

        private double[,] GetPressureHeatValuesManual()
        {
            double[,] result = new double[capHeatValues.GetLength(0), capHeatValues.GetLength(1)];

            for (int i = 0; i < result.GetLength(0); i++)
            {
                for (int j = 0; j < result.GetLength(1); j++)
                {
                    double x = capHeatValues[i, j];
                    result[i, j] =
                        manualCoef0
                        + (manualCoef1 * x)
                        + (manualCoef2 * Math.Pow(x, 2))
                        + (manualCoef3 * Math.Pow(x, 3));
                }
            }

            return result;
        }

        private double[,] GetPressureHeatValues()
        {
            if (Global.Lut == null || Global.Lut.Values == null)
                return new double[capHeatValues.GetLength(0), capHeatValues.GetLength(1)];

            double[,] result = new double[capHeatValues.GetLength(0), capHeatValues.GetLength(1)];

            for (int i = 0; i < result.GetLength(0); i++)
            {
                for (int j = 0; j < result.GetLength(1); j++)
                {
                    double x = capHeatValues[i, j];

                    double coef0 = Global.Lut.Values[i, j, 0]; //j, i
                    double coef1 = Global.Lut.Values[i, j, 1]; //j, i
                    double coef2 = Global.Lut.Values[i, j, 2]; //j, i
                    double coef3 = Global.Lut.Values[i, j, 3]; //j, i

                    result[i, j] =
                        coef0
                        + (coef1 * x)
                        + (coef2 * Math.Pow(x, 2))
                        + (coef3 * Math.Pow(x, 3));
                }
            }

            return result;
        }

        private double[,] GetTauAdjustedArray(double[,] arr)
        {
            if (capHeatValues.GetLength(0) != arr.GetLength(0) || capHeatValues.GetLength(1) != arr.GetLength(1)) return arr;

            double[,] result = new double[arr.GetLength(0), arr.GetLength(1)];

            for (int y = 0; y < arr.GetLength(0); y++)
            {
                for (int x = 0; x < arr.GetLength(1); x++)
                {
                    result[y, x] = (capHeatValues[y, x] * (1 - tauValue)) + (arr[y, x] * tauValue);
                }
            }

            return result;
        }

        private double[,] RotateArray(double[,] arr)
        {
            double[,] result = new double[arr.GetLength(1), arr.GetLength(0)];

            for (int i = 0; i < arr.GetLength(0); i++)
            {
                for (int j = 0; j < arr.GetLength(1); j++)
                {
                    result[j, i] = arr[i, j];
                }
            }

            return result;
        }

        private double[,] CloneArray(double[,] arr)
        {
            double[,] result = new double[arr.GetLength(0), arr.GetLength(1)];

            for (int i = 0; i < arr.GetLength(0); i++)
            {
                for (int j = 0; j < arr.GetLength(1); j++)
                {
                    result[i, j] = arr[i, j];
                }
            }

            return result;
        }

        private double[,] CloneArray(double[,] arr, Area area)
        {
            Size size = area.GetSize();
            int startRow = area.GetTopY();
            int startColumn = area.GetLeftX();

            double[,] result = new double[size.Height, size.Width];

            for (int i = 0; i < size.Height; i++)
            {
                for (int j = 0; j < size.Width; j++)
                {
                    result[i, j] = arr[i + startRow, j + startColumn];
                }
            }

            return result;
        }

        //==============================Direct2D==============================
        public void CreateBaseSquarePath()
        {
            try
            {
                BaseSquarePath.Reset();
                BaseSquarePath.AddRectangle(new RectangleF { X = 0, Y = 0, Height = 1, Width = 1 });
            }
            catch { }
        }

        private void DrawGrid(Graphics g)
        {
            for (int y = 0; y < capHeatValues.GetLength(0); y++)
            {
                for (int x = 0; x < capHeatValues.GetLength(1); x++)
                {

                    var path = (GraphicsPath)BaseSquarePath.Clone();
                    Matrix mat = new Matrix();
                    mat.Translate(x * squareSize.Width, y * squareSize.Height);
                    mat.Scale(squareSize.Width, squareSize.Height);
                    path.Transform(mat);
                    g.DrawPath(new Pen(Color.Black, 1), path);


                    //Color color = GetColorFromHeatValue(ScaleHeatValue(heatValues[x, y]));
                    //DrawPixel(g, x * squareSize.Width, y * squareSize.Height, squareSize, color, false, 255);
                    //DrawPixel(g, x * PixelSize.Width, (yHeight - y - 1) * PixelSize.Height, GetColorFromHeatValue(heatValues[x, y]));
                    //DrawSquare(g, x * squareSize.Width, y * squareSize.Height, x, y, color);
                    //DrawCircle(g, x * squareSize.Width, y * squareSize.Height, new SizeF(squareSize.Width * 10f, squareSize.Height * 10f), color);
                }
            }
        }

        private void CreateGridPath1()
        {
            BaseGridPath.Reset();
            for (int i = 0; i < capHeatValues.GetLength(0); i++)
            {
                BaseGridPath.CloseFigure();
                BaseGridPath.AddLine(i * squareSize.Width, 0, i * squareSize.Width, picHeatMap.ClientSize.Height);
            }
            for (int i = 0; i < capHeatValues.GetLength(1); i++)
            {
                BaseGridPath.CloseFigure();
                //  BaseGridPath.AddLine(j * 53, 0, j * 5, 23);
            }
        }

        private void SetPixelSize()
        {
            float sizeX = (float)picHeatMap.ClientSize.Width / (float)capHeatValues.GetLength(1);
            float sizeY = (float)picHeatMap.ClientSize.Height / (float)capHeatValues.GetLength(0);
            squareSize = new SizeF(sizeX, sizeY);
        }

        private void DrawPixel(Graphics g, float x, float y, SizeF size, Color color, bool border, int opacity)
        {
            try
            {
                var path = (GraphicsPath)BaseSquarePath.Clone();
                Matrix mat = new Matrix();
                mat.Translate(x, y);
                mat.Scale(size.Width, size.Height);
                path.Transform(mat);
                g.FillPath(new SolidBrush(Color.FromArgb(opacity, color)), path);
                if (border) g.DrawPath(new Pen(Color.Black, 1), path);
            }
            catch { }
        }

        private Square GetSquare(int indexX, int indexY, Color centerColor)
        {
            Square square = new Square(squareDivider);

            square.NeighborColors[1, 1] = centerColor;

            if (indexX > 0)
                square.NeighborColors[0, 1] = GetColorFromHeatValue(ScaleHeatValue(capHeatValues[indexX - 1, indexY]), true);
            else square.NeighborColors[0, 1] = centerColor;

            if (indexX < capHeatValues.GetLength(0) - 1)
                square.NeighborColors[2, 1] = GetColorFromHeatValue(ScaleHeatValue(capHeatValues[indexX + 1, indexY]), true);
            else square.NeighborColors[2, 1] = centerColor;

            if (indexY > 0)
                square.NeighborColors[1, 2] = GetColorFromHeatValue(ScaleHeatValue(capHeatValues[indexX, indexY - 1]), true);
            else square.NeighborColors[1, 2] = centerColor;

            if (indexY < capHeatValues.GetLength(1) - 1)
                square.NeighborColors[1, 0] = GetColorFromHeatValue(ScaleHeatValue(capHeatValues[indexX, indexY + 1]), true);
            else square.NeighborColors[1, 0] = centerColor;

            square.CalculatePixels();

            return square;
        }

        private void DrawSquare(Graphics g, float x, float y, int indexX, int indexY, Color color)
        {
            //DrawPixel(g, x * squareSize.Width, y * squareSize.Height, squareSize, color, true, 255);

            Square square = GetSquare(indexX, indexY, color);

            for (int i = 0; i < squareDivider; i++)
            {
                for (int j = 0; j < squareDivider; j++)
                {
                    float size = squareSize.Width / squareDivider;
                    DrawPixel(g, x + (i * size), y + (j * size), new SizeF(size, size), square.Pixels[i, j].Color, false, square.Pixels[i, j].Opacity);
                }
            }
        }

        private void DrawCircle(Graphics g, float x, float y, SizeF size, Color color)
        {
            GradientCircle circle = new GradientCircle();
            circle.Location = new PointF(x, y);
            circle.Size = size;
            circle.Color = color;

            circle.Draw(g);
        }


        private void DrawPixels(Graphics g, bool isCaps)
        {
            try
            {
                double heatValue;
                //int yHeight = heatValues.GetLength(1);
                for (int y = 0; y < capHeatValues.GetLength(0); y++)
                {
                    for (int x = 0; x < capHeatValues.GetLength(1); x++)
                    {
                        if (isCaps) heatValue = capHeatValues[y, x];
                        else heatValue = pressureHeatValues[y, x];
                        Color color;
                        if(isCaps) color = GetColorFromHeatValue(Math.Round(ScaleHeatValue(heatValue) * 1000000000000), isCaps);
                        else color = GetColorFromHeatValue(Math.Round(ScaleHeatValue(heatValue)), isCaps);
                        DrawPixel(g, x * squareSize.Width, y * squareSize.Height, squareSize, color, false, 255);
                        //DrawPixel(g, x * PixelSize.Width, (yHeight - y - 1) * PixelSize.Height, GetColorFromHeatValue(heatValues[x, y]));
                        //DrawSquare(g, x * squareSize.Width, y * squareSize.Height, x, y, color);
                        //DrawCircle(g, x * squareSize.Width, y * squareSize.Height, new SizeF(squareSize.Width * 10f, squareSize.Height * 10f), color);
                    }
                }

            }
            catch { }
        }

        private void DrawSelection(Graphics g)
        {
            if (selectedArea == null) return;
            float x = selectedArea.GetLeftX() * squareSize.Width;
            float y = selectedArea.GetTopY() * squareSize.Height;
            Size selectedSize = selectedArea.GetSize();
            SizeF size = new SizeF(selectedSize.Width * squareSize.Width, selectedSize.Height * squareSize.Height);
            DrawPixel(g, x, y, size, Color.Gray, false, 192);
        }

        private void DrawNumbers(Graphics g, bool isCaps)
        {
            try
            {
                if (!serialPortDataReciever.IsDevelopmentMode) return;

                double heatValue;
                int number;

                for (int y = 0; y < capHeatValues.GetLength(0); y++)
                {
                    for (int x = 0; x < capHeatValues.GetLength(1); x++)
                    {
                        if (isCaps) heatValue = capHeatValues[y, x];
                        else heatValue = pressureHeatValues[y, x];
                        Color color = GetColorFromHeatValue(Math.Round(ScaleHeatValue(heatValue) * 1000000000000), isCaps);
                        if (isCaps) number = (int)Math.Round(ScaleHeatValue(heatValue) * 1000000000000);
                        else number = (int)Math.Round(ScaleHeatValue(heatValue));
                        DrawNumber(g, x * squareSize.Width, y * squareSize.Height, squareSize, color, number);
                    }
                }
            }
            catch { }
        }

        private void DrawNumber(Graphics g, float x, float y, SizeF size, Color backColor, int number)
        {
            try
            {
                Font font = new Font("Arial", 1f, FontStyle.Regular, GraphicsUnit.Pixel); //(1f / (float)number.ToString().Length )


                GraphicsPath path = new GraphicsPath();
                path.Reset();
                path.StartFigure();
                path.AddString(number.ToString(), font.FontFamily, (int)font.Style, font.Size, new PointF(0f, 0f), StringFormat.GenericDefault);

                RectangleF bounds = path.GetBounds();
                float ratio = bounds.Height / bounds.Width;
                float scale = 0.4f;
                //float offset = (size.Width - bounds.Width*size.Width) / 2;
                //float offset = (size.Width - (bounds.Width * size.Width * (1 - scale))) / 2;
                float offset = ((size.Width * scale) - bounds.Width * (size.Width * scale)) / 2;
                //float offset = 0;

                Matrix mat = new Matrix();
                mat.Translate(x + (size.Width * (1 - scale) / 2) + offset, y + (size.Height * (1 - scale) / 2));
                mat.Scale(size.Width * scale, size.Height * scale);
                //mat.Translate(-(bounds.Width / 2), 0);
                path.Transform(mat);

                //Color color = (backColor.R == 0 && backColor.G == 0 && backColor.B == 0) ? Color.White : Color.Black;
                Color color;

                if (backColor.R * 0.2126 + backColor.G * 0.7152 + backColor.B * 0.0722 < 255 / 2 - 75) color = Color.White;
                else color = Color.Black;

                g.FillPath(new SolidBrush(color), path);
            }
            catch { }
        }
        private void DrawGrid1(Graphics g)
        {
            try
            {
                var path = (GraphicsPath)BaseGridPath.Clone();
                Matrix mat = new Matrix();
                mat.Scale(squareSize.Width, squareSize.Height);
                path.Transform(mat);
                g.DrawPath(new Pen(Color.Black, 1), path);

            }
            catch { }
        }

        private Color GetColorFromHeatValue(double heatValue, bool isCaps)
        {
            if (rangesList.Count == 0)
            {
                List<ColorRange> ranges;
                if (isCaps) ranges = capsColorRanges;
                else ranges = pressuresColorRanges;
                if (serialPortDataReciever.IsDevelopmentMode)
                {
                    for (int i = 0; i < ranges.Count; i++)
                    {
                        ColorRange range = ranges[i];
                        if (range.Start <= heatValue && heatValue <= range.End)
                            return range.Color;
                    }
                }
                else
                {
                    for (int i = 0; i < ranges.Count; i++)
                    {
                        ColorRange range = ranges[i];
                        if (isCaps)
                        {
                            if (range.Start * 1E-12 <= heatValue && heatValue <= range.End * 1E-12)
                                return range.Color;
                        }
                        else
                        {
                            if (range.Start <= heatValue && heatValue <= range.End)
                                return range.Color;
                        }
                    }
                }
            }
            else
            {
                //TODO: Update with pressure color ranges
                for (int i = 0; i < rangesList.Count; i++)
                {
                    string rangeStr = rangesList[i];
                    int rangeSeperatorIndex = rangeStr.IndexOf('-');
                    double min = double.Parse(rangeStr.Substring(0, rangeSeperatorIndex));
                    double max = double.Parse(rangeStr.Substring(rangeSeperatorIndex + 1, rangeStr.IndexOf(' ') - rangeSeperatorIndex - 1));
                    if (min <= heatValue && heatValue <= max)
                        return Color.FromName(GetColorNameFromRangeStr(rangeStr));
                }
            }
            return Color.White;
        }

        private void AdjustSize()
        {
            if (!originalHeatmapSizeDetermined)
            {
                //picHeatMap.Size = new Size(Size.Width, Size.Height);
                //originalHeatmapSize = picHeatMap.ClientSize;
                originalHeatmapSize = GetHeatmapSize();
                originalHeatmapSizeDetermined = true;
                picHeatMap.Dock = DockStyle.None;
            }
            AdjustHeatmapSize();
            SetPixelSize();
            RepositionHeatmaps();
            autoResizeHeatmap = true;

            if (Size.Width != currentSize.Width || Size.Height != currentSize.Height)
            {
                currentSize = new Size(Size.Width, Size.Height);
                SizeChanged_Event?.Invoke(currentSize);
            }

        }

        private void AdjustHeatmapSize()
        {
            int dataWidth = capHeatValues.GetLength(1);
            int dataHeight = capHeatValues.GetLength(0);

            double ratio = (double)dataWidth / (double)dataHeight;

            Size heatmapClientSize = new Size();

            if (stretchToMaxMode)
            {
                if (stretchDirection == StretchDirection.Horizontal)
                {
                    heatmapClientSize = new Size(maxSize.Width, (int)(maxSize.Width / ratio));
                    if (GetLengthOfBaseAxis(heatmapClientSize.Width) > maxSize.Height)
                    {
                        int height = (maxSize.Height - heatMapsDivider) / 2;
                        heatmapClientSize = new Size((int)(height * ratio), height);
                    }

                }
                else
                {
                    heatmapClientSize = new Size((int)(maxSize.Height * ratio), maxSize.Height);
                    if (GetLengthOfBaseAxis(heatmapClientSize.Height) > maxSize.Width)
                    {
                        int width = (maxSize.Width - heatMapsDivider) / 2;
                        heatmapClientSize = new Size(width, (int)(width / ratio));
                    }
                }
            }
            else
            {
                switch (stretchDirection)
                {
                    case StretchDirection.Horizontal:
                        heatmapClientSize = new Size((int)(originalHeatmapSize.Height * ratio), originalHeatmapSize.Height);
                        if (stretchToMaxMode || heatmapClientSize.Width > maxSize.Width)
                            heatmapClientSize = new Size(maxSize.Width, (int)(maxSize.Width / ratio));
                        //Size = new Size(heatmapClientSize.Width + 20, heatmapClientSize.Height + 20);
                        //Size = picHeatMap.Size;
                        break;

                    case StretchDirection.Vertical:
                        heatmapClientSize = new Size(originalHeatmapSize.Width, (int)(originalHeatmapSize.Width / ratio));
                        if (stretchToMaxMode || heatmapClientSize.Height > maxSize.Height)
                            heatmapClientSize = new Size((int)(maxSize.Height * ratio), maxSize.Height);
                        //Size = new Size(heatmapClientSize.Width + 20, heatmapClientSize.Height + 20);
                        //Size = picHeatMap.Size;
                        break;
                }
            }
            picHeatMap.ClientSize = heatmapClientSize;
            picHeatmapPressure.ClientSize = heatmapClientSize;
        }

        private int GetLengthOfBaseAxis(int lengthOfStretchAxis)
        {
            int dataWidth = capHeatValues.GetLength(1);
            int dataHeight = capHeatValues.GetLength(0);

            double ratio = (double)dataWidth / (double)dataHeight;

            int baseAxisHeatmapSize;
            if (stretchDirection == StretchDirection.Horizontal) baseAxisHeatmapSize = (int)((double)lengthOfStretchAxis / ratio);
            else baseAxisHeatmapSize = (int)((double)lengthOfStretchAxis * ratio);
            return (baseAxisHeatmapSize * 2) + heatMapsDivider;
        }

        private void RepositionHeatmaps()
        {
            int distance;
            switch (stretchDirection)
            {
                case StretchDirection.Horizontal:
                    distance = picHeatMap.Location.Y + picHeatMap.Size.Height + heatMapsDivider;
                    picHeatmapPressure.Location = new Point(picHeatMap.Location.X, distance);
                    Size = new Size(picHeatMap.Size.Width, distance + picHeatmapPressure.Size.Height);
                    break;

                case StretchDirection.Vertical:
                    distance = picHeatMap.Location.X + picHeatMap.Size.Width + heatMapsDivider;
                    picHeatmapPressure.Location = new Point(distance, picHeatMap.Location.Y);
                    Size = new Size(distance + picHeatmapPressure.Size.Width, picHeatMap.Size.Height);
                    break;
            }
        }

        private Size GetHeatmapSize()
        {
            int width = 0;
            int height = 0;
            switch (stretchDirection)
            {
                case StretchDirection.Horizontal:
                    width = ClientSize.Width;
                    height = (ClientSize.Height / 2) - (heatMapsDivider / 2);
                    break;

                case StretchDirection.Vertical:
                    width = (ClientSize.Width / 2) - (heatMapsDivider / 2);
                    height = ClientSize.Height;
                    break;
            }
            return new Size(width, height);
        }

        private void DrawAll(Graphics g, bool isCaps)
        {
            DrawPixels(g, isCaps);
            DrawSelection(g);
            DrawNumbers(g, isCaps);
            // DrawGrid(g);
        }

        public void Redraw()
        {
            picHeatMap.Invalidate();
        }

        private void picHeatMap_Paint(object sender, PaintEventArgs e)
        {
            //  MyGraphics = e.Graphics;
            //  DrawAll(e.Graphics);
        }

        public void PaintImage()
        {
            PaintImage(picHeatMap, true);
            PaintImage(picHeatmapPressure, false);
        }

        public void PaintImage(PictureBox pictureBox, bool isCaps)
        {
            if (pictureBox.Width == 0 || pictureBox.Height == 0) return;

            Bitmap bitmap = new Bitmap(pictureBox.Width, pictureBox.Height);

            if (smoothImage)
            {
                double[,] heatValues = isCaps ? capHeatValues : pressureHeatValues;
                List<ColorRange> colorRanges = isCaps ? capsColorRanges : pressuresColorRanges;
                HeatMapType type = isCaps ? HeatMapType.Caps : HeatMapType.Pressures;

                bitmap = Interpolation.PerformLinearInterpolation(heatValues, bitmap.Width, bitmap.Height, colorRanges, type);
            }
            else
            {
                using (Graphics g = Graphics.FromImage(bitmap))
                {
                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                    DrawAll(g, isCaps);
                }
            }

            using (Graphics g = Graphics.FromImage(bitmap))
            {
                DrawGrid(g);
            }

            pictureBox.Image = bitmap;
        }

        public void PaintImage_Old(PictureBox pictureBox, bool isCaps)
        {
            if (pictureBox.Width == 0 || pictureBox.Height == 0) return;

            Bitmap bitmap = new Bitmap(pictureBox.Width, pictureBox.Height);
            using (Graphics g = Graphics.FromImage(bitmap))
            {
                //g.SmoothingMode = SmoothingMode.AntiAlias;
                DrawAll(g, isCaps);
            }

            if (smoothImage)
            {
                bitmap = ApplyGaussianBlurr(bitmap);
                //bitmap = ApplyThreshholding(bitmap);
                List<Color> colors = GetColorRangesColors(isCaps);
                colors.Add(Color.White);
                if (!isShowBlur) bitmap = Thresholding.ApplyThresholding(bitmap, colors);
            }

            using (Graphics g = Graphics.FromImage(bitmap))
            {
                DrawGrid(g);
            }

            pictureBox.Image = bitmap;
        }

        public Bitmap ApplyGaussianBlurr(Bitmap sourceImage)
        {
            GaussianBlur blur = new GaussianBlur(sourceImage);
            return blur.Process(4);

            /*
            GaussianBlur blur = new GaussianBlur(picHeatMap.Image as Bitmap);
            Bitmap result = blur.Process(10);
            picHeatMap.Image = result;
            */
            /*
            GaussianBlur filter = new GaussianBlur(1000, 11);
            Bitmap image = (Bitmap)picHeatMap.Image;
            filter.ApplyInPlace(image);
            filter.ApplyInPlace(image);
            filter.ApplyInPlace(image);
            filter.ApplyInPlace(image);
            filter.ApplyInPlace(image);
            picHeatMap.Image = image;
            */
        }

        public Bitmap ApplyThreshholding(Bitmap sourceImage)
        {
            using (Graphics g = Graphics.FromImage(sourceImage))
            {
                ImageAttributes imageAttr = new ImageAttributes();
                imageAttr.SetThreshold(0.7f, ColorAdjustType.Bitmap);
                Rectangle rect = new Rectangle(picHeatMap.Location, picHeatMap.Size);
                g.DrawImage(sourceImage, rect, picHeatMap.Location.X, picHeatMap.Location.Y, picHeatMap.Size.Width, picHeatMap.Size.Height,
                    GraphicsUnit.Pixel, imageAttr);
            }
            return sourceImage;
        }

        private List<Color> GetColorRangesColors(bool isCaps)
        {
            List<Color> colors = new List<Color>();

            List<ColorRange> colorRanges;
            if (isCaps) colorRanges = capsColorRanges;
            else colorRanges = pressuresColorRanges;

            for (int i = 0; i < colorRanges.Count; i++)
            {
                colors.Add(colorRanges[i].Color);
            }

            return colors;
        }

        private void timerRedraw_Tick(object sender, EventArgs e)
        {
            Redraw();
        }

        private void picHeatMap_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                ClearSelection();
                return;
            }

            int dataX = (int)((float)e.X / squareSize.Width);
            int dataY = (int)((float)e.Y / squareSize.Height);

            isMouseDown = true;
            clicks++;

            if (isSelectionAllowed)
            {
                if (clicks > 1)
                {
                    selectedArea = new Area(0, capHeatValues.GetLength(1) - 1, 0, capHeatValues.GetLength(0) - 1);
                    isMouseDown = false;
                }
                else selectedArea = new Area(dataX, dataX, dataY, dataY);
            }
        }

        private void picHeatMap_MouseUp(object sender, MouseEventArgs e)
        {
            isMouseDown = false;
        }

        private void timerDoubleClick_Tick(object sender, EventArgs e)
        {
            clicks = 0;
        }

        private void picHeatMap_MouseMove(object sender, MouseEventArgs e)
        {
            int dataX = (int)((float)e.X / squareSize.Width);
            int dataY = (int)((float)e.Y / squareSize.Height);

            /* 
             if (dataX < 0) dataX = 0;
             if (dataY < 0) dataY = 0;

             if (dataX >= heatValues.GetLength(0)) dataX = heatValues.GetLength(0) - 1;
             if (dataY >= heatValues.GetLength(1)) dataY = heatValues.GetLength(1) - 1;
            */

            if (dataX < 0 || dataY < 0 || dataX >= capHeatValues.GetLength(1) || dataY >= capHeatValues.GetLength(0))
                tooltip.Hide(picHeatMap);
            else
            {
                if (serialPortDataReciever.IsDevelopmentMode) tooltip.Show("X=" + (dataY + 1) + ", Y=" + (dataX + 1) + ". Value: " + (ScaleHeatValue(capHeatValues[dataY, dataX]) * 1000000000000).ToString("0.0"), picHeatMap, e.X + 5, e.Y - 15);
                else tooltip.Show("X=" + dataY + ", Y=" + dataX + ". Value: " + (ScaleHeatValue(capHeatValues[dataY, dataX]) * 1000000000000).ToString("0.0"), picHeatMap, e.X + 5, e.Y - 15); //e.X, e.Y - 15
            }
            //else tooltip.Show("X=" + (dataY + 1) + ", Y=" + (dataX + 1) + ". Value: " + ScaleHeatValue(capHeatValues[dataY, dataX]).ToString(), picHeatMap, e.X, e.Y - 15);
            //else tooltip.Show("X=" + dataX + ", Y=" + dataY + ". Value: " + ScaleHeatValue(capHeatValues[dataX, dataY]).ToString(), picHeatMap, e.X, e.Y - 15);
            //else tooltip.Show("X=" + dataX + ", Y=" + dataY + ". Value: " + Math.Round(ScaleHeatValue(heatValues[dataX, dataY]), 4).ToString(), picHeatMap, e.X, e.Y - 15);

            if (isMouseDown && selectedArea != null && isSelectionAllowed)
            {
                selectedArea.XEnd = dataX;
                selectedArea.YEnd = dataY;
            }
        }

        private void picHeatMapPressure_MouseMove(object sender, MouseEventArgs e)
        {
            int dataX = (int)((float)e.X / squareSize.Width);
            int dataY = (int)((float)e.Y / squareSize.Height);

            /* 
             if (dataX < 0) dataX = 0;
             if (dataY < 0) dataY = 0;

             if (dataX >= heatValues.GetLength(0)) dataX = heatValues.GetLength(0) - 1;
             if (dataY >= heatValues.GetLength(1)) dataY = heatValues.GetLength(1) - 1;
            */

            if (dataX < 0 || dataY < 0 || dataX >= pressureHeatValues.GetLength(1) || dataY >= pressureHeatValues.GetLength(0))
                tooltip.Hide(picHeatmapPressure);
            else
            {
                if (serialPortDataReciever.IsDevelopmentMode) tooltip.Show("X=" + (dataY + 1) + ", Y=" + (dataX + 1) + ". Value: " + ScaleHeatValue(pressureHeatValues[dataY, dataX]).ToString(), picHeatmapPressure, e.X + 5, e.Y - 15);
                else tooltip.Show("X=" + dataY + ", Y=" + dataX + ". Value: " + ScaleHeatValue(pressureHeatValues[dataY, dataX]).ToString(), picHeatmapPressure, e.X + 5, e.Y - 15);
            }
            //else tooltip.Show("X=" + dataX + ", Y=" + dataY + ". Value: " + Math.Round(ScaleHeatValue(heatValues[dataX, dataY]), 4).ToString(), picHeatMap, e.X, e.Y - 15);
        }

        private void picHeatMap_MouseLeave(object sender, EventArgs e)
        {
            tooltip.Hide(picHeatMap);
        }

        private void picHeatmapPressure_MouseLeave(object sender, EventArgs e)
        {
            tooltip.Hide(picHeatmapPressure);
        }

        private void picHeatMap_Resize(object sender, EventArgs e)
        {
            if (capHeatValues != null && autoResizeHeatmap)
                AdjustSize();
        }

        private void timerRepaint_Tick(object sender, EventArgs e)
        {
            PaintImage();
        }

        private void picHeatMap_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            selectedArea = new Area(0, capHeatValues.GetLength(1), 0, capHeatValues.GetLength(0));
            isMouseDown = false;
        }
        //====================================================================
    }

    //[Serializable]
    public class ColorRange
    {
        public double Start { get; set; }
        public double End { get; set; }
        public Color Color { get; set; }

        public ColorRange(double start, double end, Color color)
        {
            Start = start;
            End = end;
            Color = color;
        }

        public ColorRange(ColorRange colorRange)
        {
            Start = colorRange.Start;
            End = colorRange.End;
            Color = colorRange.Color;
        }
    }

    public class BluetoothDataProcessor
    {
        private List<byte> buffer;
        private List<BluetoothMessage> messagesBuffer;
        private List<BluetoothDataRow> rowsBuffer;

        public delegate void EventHandler_MatData(double[,] matData);
        public delegate void EventHandler_Void();

        public event EventHandler_MatData BluetoothMatArrived_Event;
        public event EventHandler_Void GotDetails_Event;

        public BluetoothDataProcessor()
        {
            buffer = new List<byte>();
            messagesBuffer = new List<BluetoothMessage>();
            rowsBuffer = new List<BluetoothDataRow>();
        }

        public void ProcessData(byte[] data)
        {
            buffer.AddRange(data);
            ProcessData();
        }

        private void ProcessData()
        {
            byte[] sync = new byte[] { 0xAA, 0xBB, 0xBB, 0xAA };
            int syncIndex = GetIndexOfRange(sync.ToList());
            if (syncIndex == -1) return;
            if (syncIndex != 0) buffer.RemoveRange(0, syncIndex);
            int nextSyncIndex = GetIndexOfRange(sync.ToList(), 2);
            List<List<byte>> msgsBuffer = new List<List<byte>>();
            while (nextSyncIndex != -1)
            {
                List<byte> data = buffer.GetRange(0, nextSyncIndex);
                messagesBuffer.Add(new BluetoothMessage(data));
                buffer.RemoveRange(0, nextSyncIndex);
                nextSyncIndex = GetIndexOfRange(sync.ToList(), 2);
            }
            ProcessMessages();
        }

        private void ProcessMessages()
        {
            for (int i = 0; i < messagesBuffer.Count; i++)
            {
                BleMessageType type = messagesBuffer[i].BasicMessage.Type;
                switch (type)
                {
                    case BleMessageType.kGetCalibrationValues:
                        Global.BluetoothCalibration = new BluetoothCalibration(messagesBuffer[i]);
                        break;

                    case BleMessageType.kGetDetails:
                        Global.BluetoothDetails = new BluetoothDetails(messagesBuffer[i]);
                        GotDetails_Event?.Invoke();
                        break;

                    case BleMessageType.kReturnRow:
                        rowsBuffer.Add(new BluetoothDataRow(messagesBuffer[i]));
                        break;
                }
            }

            messagesBuffer.Clear();
            ProcessRows();
        }

        private void ProcessRows()
        {
            int startIndex = GetStartRowIndex();
            if (startIndex == -1) return;
            if (startIndex != 0) rowsBuffer.RemoveRange(0, startIndex);
            int nextStartIndex = GetStartRowIndex(2);
            while (nextStartIndex != -1)
            {
                ProcessRows(rowsBuffer.GetRange(0, nextStartIndex));
                rowsBuffer.RemoveRange(0, nextStartIndex);
                nextStartIndex = GetStartRowIndex(2);
                Thread.Sleep(10);
            }
        }

        private void ProcessRows(List<BluetoothDataRow> rows)
        {
            double[,] result = new double[rows.Count, rows[0].Caps.Count];
            for (int i = 0; i < result.GetLength(0); i++)
            {
                rows[i].LoadCapValues();
                for (int j = 0; j < result.GetLength(1); j++)
                {
                    result[i, j] = rows[i].CapValues[j];
                }
            }
            BluetoothMatArrived_Event?.Invoke(result);
        }

        private int GetIndexOfRange(List<byte> range)
        {
            List<byte> checkedRange;
            for (int i = 0; i < buffer.Count - range.Count + 1; i++)
            {
                checkedRange = buffer.GetRange(i, range.Count);
                if (RangesEqual(range, checkedRange)) return i;
            }
            return -1;
        }

        private int GetIndexOfRange(List<byte> range, int occurence)
        {
            List<byte> checkedRange;
            int occurenceCounter = 0;
            for (int i = 0; i < buffer.Count - range.Count + 1; i++)
            {
                checkedRange = buffer.GetRange(i, range.Count);
                if (RangesEqual(range, checkedRange))
                {
                    occurenceCounter++;
                    if (occurenceCounter == occurence) return i;
                }
            }
            return -1;
        }

        private bool RangesEqual(List<byte> range1, List<byte> range2)
        {
            if (range1.Count != range2.Count) return false;
            for (int i = 0; i < range1.Count; i++)
            {
                if (range1[i] != range2[i]) return false;
            }
            return true;
        }

        private int GetStartRowIndex(int occurence)
        {
            int occurenceCounter = 0;
            for (int i = 0; i < rowsBuffer.Count; i++)
            {
                if (rowsBuffer[i].RowNumber == 0)
                {
                    occurenceCounter++;
                    if (occurenceCounter == occurence) return i;
                }
            }
            return -1;
        }

        private int GetStartRowIndex()
        {
            for (int i = 0; i < rowsBuffer.Count; i++)
            {
                if (rowsBuffer[i].RowNumber == 0) return i;
            }
            return -1;
        }
    }

    public class Pixel
    {
        public Color Color { get; set; }
        public int Opacity { get; set; }

        public Pixel()
        {

        }

        public Pixel(Color color, int opacity)
        {
            Color = color;
            Opacity = opacity;
        }
    }

    public class Square
    {
        public Pixel[,] Pixels { get; set; }
        public Color[,] NeighborColors { get; set; }

        public Square(int resolution)
        {
            Pixels = new Pixel[resolution, resolution];
            NeighborColors = new Color[3, 3];

            InitValues();
        }

        public void SetNeighborColors(Color[,] neighborColors)
        {
            NeighborColors = neighborColors;
            CalculatePixels();
        }

        public void SetNeighborColor(int offsetX, int offsetY, Color color)
        {
            NeighborColors[1 + offsetX, 1 + offsetY] = color;
        }

        public void CalculatePixels()
        {
            CalculatePixelsOpacity();
            CalculatePixelsColor();
            ReorderPixels();
        }

        private void InitValues()
        {
            for (int i = 0; i < Pixels.GetLength(0); i++)
            {
                for (int j = 0; j < Pixels.GetLength(1); j++)
                {
                    Pixels[i, j] = new Pixel(Color.Black, 255);
                }
            }

            for (int i = 0; i < NeighborColors.GetLength(0); i++)
            {
                for (int j = 0; j < NeighborColors.GetLength(1); j++)
                {
                    NeighborColors[i, j] = Color.Black;
                }
            }
        }

        private void CalculatePixelsOpacity()
        {
            int centerIndex = Pixels.GetLength(0) / 2;
            for (int distance = 1; distance <= centerIndex; distance++)
            {
                for (int i = centerIndex - distance; i <= centerIndex + distance; i++)
                {
                    Pixels[i, centerIndex - distance].Opacity = GetPixelOpacity(distance);
                    Pixels[i, centerIndex + distance].Opacity = GetPixelOpacity(distance);
                }

                for (int i = centerIndex - distance + 1; i <= centerIndex + distance - 1; i++)
                {
                    Pixels[centerIndex - distance, i].Opacity = GetPixelOpacity(distance);
                    Pixels[centerIndex + distance, i].Opacity = GetPixelOpacity(distance);
                }
            }
        }

        private void CalculatePixelsColor()
        {
            for (int i = 0; i < Pixels.GetLength(0); i++)
            {
                for (int j = 0; j < Pixels.GetLength(1); j++)
                {
                    int distanceLeft = i;
                    int distanceRight = Pixels.GetLength(0) - i - 1;
                    int distanceBottom = j;
                    int distanceTop = Pixels.GetLength(1) - j - 1;

                    if (Math.Min(distanceLeft, distanceRight) < Math.Min(distanceTop, distanceBottom))
                    {
                        //X Axis
                        if (distanceLeft < distanceRight)
                        {
                            //Left
                            Pixels[i, j].Color = NeighborColors[0, 1];
                        }
                        else
                        {
                            //Right
                            Pixels[i, j].Color = NeighborColors[2, 1];
                        }
                    }
                    else if (Math.Min(distanceLeft, distanceRight) == Math.Min(distanceTop, distanceBottom))
                    {
                        // Diagonal
                        if (distanceLeft < distanceRight)
                        {
                            if (distanceTop < distanceBottom)
                            {
                                //Top Left
                                Pixels[i, j].Color = Blend(NeighborColors[0, 1], NeighborColors[1, 2], 0.5);
                            }
                            else
                            {
                                // Bottom Left
                                Pixels[i, j].Color = Blend(NeighborColors[1, 0], NeighborColors[0, 1], 0.5);
                            }
                        }
                        else if (distanceLeft == distanceRight)
                        {
                            //Center
                            Pixels[i, j].Color = NeighborColors[1, 1];
                        }
                        else
                        {
                            if (distanceTop < distanceBottom)
                            {
                                //Top Right
                                Pixels[i, j].Color = Blend(NeighborColors[1, 2], NeighborColors[2, 1], 0.5);
                            }
                            else
                            {
                                // Bottom Right
                                Pixels[i, j].Color = Blend(NeighborColors[1, 0], NeighborColors[2, 1], 0.5);
                            }
                        }

                    }
                    else
                    {
                        //Y Axis
                        if (distanceTop < distanceBottom)
                        {
                            //Top
                            Pixels[i, j].Color = NeighborColors[1, 2];
                        }
                        else
                        {
                            //Bottom
                            Pixels[i, j].Color = NeighborColors[1, 0];
                        }
                    }
                }
            }
        }

        private int GetPixelOpacity(int distance)
        {
            int centerIndex = Pixels.GetLength(0) / 2;
            double step = (double)distance / (double)centerIndex;
            return (int)(255 - (255 * step));
        }

        private Color Blend(Color color, Color backColor, double amount)
        {
            byte r = (byte)(color.R * amount + backColor.R * (1 - amount));
            byte g = (byte)(color.G * amount + backColor.G * (1 - amount));
            byte b = (byte)(color.B * amount + backColor.B * (1 - amount));
            return Color.FromArgb(r, g, b);
        }

        private void ReorderPixels()
        {
            Pixel[,] newPixels = new Pixel[Pixels.GetLength(0), Pixels.GetLength(1)];
            for (int i = 0; i < Pixels.GetLength(0); i++)
            {
                for (int j = 0; j < Pixels.GetLength(1); j++)
                {
                    newPixels[i, Pixels.GetLength(1) - j - 1] = Pixels[i, j];
                }
            }
            Pixels = newPixels;
        }

    }

    public class GradientCircle
    {
        public PointF Location { get; set; }
        public SizeF Size { get; set; }
        public Color Color { get; set; }

        public GradientCircle()
        {
            Location = new PointF();
            Size = new SizeF();
            Color = Color.White;
        }

        public void Draw(Graphics g)
        {
            GraphicsPath path = new GraphicsPath();
            RectangleF rectangle = new RectangleF(Location, Size);
            path.AddEllipse(rectangle);
            PathGradientBrush brush = new PathGradientBrush(path);
            brush.CenterColor = Color;
            brush.SurroundColors = new Color[] { Color.Transparent };
            g.FillRectangle(brush, rectangle);
        }
    }

    public class Frame
    {
        public double[,] Caps { get; set; }
        public double[,] Pressures { get; set; }

        public Frame(double[,] caps, double[,] pressures)
        {
            Caps = caps;
            Pressures = pressures;
        }
    }

    public class GaussianBlur
    {
        private readonly int[] _alpha;
        private readonly int[] _red;
        private readonly int[] _green;
        private readonly int[] _blue;

        private readonly int _width;
        private readonly int _height;

        private readonly ParallelOptions _pOptions = new ParallelOptions { MaxDegreeOfParallelism = 16 };

        public GaussianBlur(Bitmap image)
        {
            var rct = new Rectangle(0, 0, image.Width, image.Height);
            var source = new int[rct.Width * rct.Height];
            var bits = image.LockBits(rct, ImageLockMode.ReadWrite, PixelFormat.Format32bppArgb);
            Marshal.Copy(bits.Scan0, source, 0, source.Length);
            image.UnlockBits(bits);

            _width = image.Width;
            _height = image.Height;

            _alpha = new int[_width * _height];
            _red = new int[_width * _height];
            _green = new int[_width * _height];
            _blue = new int[_width * _height];

            Parallel.For(0, source.Length, _pOptions, i =>
            {
                _alpha[i] = (int)((source[i] & 0xff000000) >> 24);
                _red[i] = (source[i] & 0xff0000) >> 16;
                _green[i] = (source[i] & 0x00ff00) >> 8;
                _blue[i] = (source[i] & 0x0000ff);
            });
        }

        public Bitmap Process(int radial)
        {
            var newAlpha = new int[_width * _height];
            var newRed = new int[_width * _height];
            var newGreen = new int[_width * _height];
            var newBlue = new int[_width * _height];
            var dest = new int[_width * _height];

            Parallel.Invoke(
                () => gaussBlur_4(_alpha, newAlpha, radial),
                () => gaussBlur_4(_red, newRed, radial),
                () => gaussBlur_4(_green, newGreen, radial),
                () => gaussBlur_4(_blue, newBlue, radial));

            Parallel.For(0, dest.Length, _pOptions, i =>
            {
                if (newAlpha[i] > 255) newAlpha[i] = 255;
                if (newRed[i] > 255) newRed[i] = 255;
                if (newGreen[i] > 255) newGreen[i] = 255;
                if (newBlue[i] > 255) newBlue[i] = 255;

                if (newAlpha[i] < 0) newAlpha[i] = 0;
                if (newRed[i] < 0) newRed[i] = 0;
                if (newGreen[i] < 0) newGreen[i] = 0;
                if (newBlue[i] < 0) newBlue[i] = 0;

                dest[i] = (int)((uint)(newAlpha[i] << 24) | (uint)(newRed[i] << 16) | (uint)(newGreen[i] << 8) | (uint)newBlue[i]);
            });

            var image = new Bitmap(_width, _height);
            var rct = new Rectangle(0, 0, image.Width, image.Height);
            var bits2 = image.LockBits(rct, ImageLockMode.ReadWrite, PixelFormat.Format32bppArgb);
            Marshal.Copy(dest, 0, bits2.Scan0, dest.Length);
            image.UnlockBits(bits2);
            return image;
        }

        private void gaussBlur_4(int[] source, int[] dest, int r)
        {
            var bxs = boxesForGauss(r, 3);
            boxBlur_4(source, dest, _width, _height, (bxs[0] - 1) / 2);
            boxBlur_4(dest, source, _width, _height, (bxs[1] - 1) / 2);
            boxBlur_4(source, dest, _width, _height, (bxs[2] - 1) / 2);
        }

        private int[] boxesForGauss(int sigma, int n)
        {
            var wIdeal = Math.Sqrt((12 * sigma * sigma / n) + 1);
            var wl = (int)Math.Floor(wIdeal);
            if (wl % 2 == 0) wl--;
            var wu = wl + 2;

            var mIdeal = (double)(12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
            var m = Math.Round(mIdeal);

            var sizes = new List<int>();
            for (var i = 0; i < n; i++) sizes.Add(i < m ? wl : wu);
            return sizes.ToArray();
        }

        private void boxBlur_4(int[] source, int[] dest, int w, int h, int r)
        {
            for (var i = 0; i < source.Length; i++) dest[i] = source[i];
            boxBlurH_4(dest, source, w, h, r);
            boxBlurT_4(source, dest, w, h, r);
        }

        private void boxBlurH_4(int[] source, int[] dest, int w, int h, int r)
        {
            var iar = (double)1 / (r + r + 1);
            Parallel.For(0, h, _pOptions, i =>
            {
                var ti = i * w;
                var li = ti;
                var ri = ti + r;
                var fv = source[ti];
                var lv = source[ti + w - 1];
                var val = (r + 1) * fv;
                for (var j = 0; j < r; j++) val += source[ti + j];
                for (var j = 0; j <= r; j++)
                {
                    val += source[ri++] - fv;
                    dest[ti++] = (int)Math.Round(val * iar);
                }
                for (var j = r + 1; j < w - r; j++)
                {
                    val += source[ri++] - dest[li++];
                    dest[ti++] = (int)Math.Round(val * iar);
                }
                for (var j = w - r; j < w; j++)
                {
                    val += lv - source[li++];
                    dest[ti++] = (int)Math.Round(val * iar);
                }
            });
        }

        private void boxBlurT_4(int[] source, int[] dest, int w, int h, int r)
        {
            var iar = (double)1 / (r + r + 1);
            Parallel.For(0, w, _pOptions, i =>
            {
                var ti = i;
                var li = ti;
                var ri = ti + r * w;
                var fv = source[ti];
                var lv = source[ti + w * (h - 1)];
                var val = (r + 1) * fv;
                for (var j = 0; j < r; j++) val += source[ti + j * w];
                for (var j = 0; j <= r; j++)
                {
                    val += source[ri] - fv;
                    dest[ti] = (int)Math.Round(val * iar);
                    ri += w;
                    ti += w;
                }
                for (var j = r + 1; j < h - r; j++)
                {
                    val += source[ri] - source[li];
                    dest[ti] = (int)Math.Round(val * iar);
                    li += w;
                    ri += w;
                    ti += w;
                }
                for (var j = h - r; j < h; j++)
                {
                    val += lv - source[li];
                    dest[ti] = (int)Math.Round(val * iar);
                    li += w;
                    ti += w;
                }
            });
        }
    }

    public enum StretchDirection { Horizontal, Vertical }
}